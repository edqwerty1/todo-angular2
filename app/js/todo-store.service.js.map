{"version":3,"sources":["todo-store.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAOI,YAAoB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;oBAC3B,IAAI,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;oBAEhC,IAAI,CAAC,MAAM,GAAG,IAAI,eAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;yBACnE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;yBAChC,KAAK,EAAE,CAAC;gBACjB,CAAC;;gBAED,SAAS;oBACL,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iCAAiC,CAAC;yBAC5C,GAAG,CAAC,CAAC,GAAa,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC;yBAClC,SAAS,CAAC,IAAI;wBACX,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACnC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBACpD,CAAC,EACD,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAC1B,CAAC;gBACV,CAAC;;gBAED,WAAW,CAAC,EAAU;oBAClB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,mCAAmC,EAAE,EAAE,CAAC;yBACrD,SAAS,CAAC,QAAQ;wBACf,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK;4BACnC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gCAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;4BAAC,CAAC;wBAChE,CAAC,CAAC,CAAC;wBACH,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBACpD,CAAC,EAAE,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxC,CAAC;;gBAED,OAAO,CAAC,OAAe;oBACnB,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,kCAAkC,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;yBAC5G,GAAG,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;yBAChC,SAAS,CAAC,IAAI;wBACX,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBACpD,CAAC,EAAE,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;gBAExC,CAAC;;YAEL,CAAC;YAjDD;gBAAC,iBAAU,EAAE;;gCAAA;YACb,+CAgDC,CAAA","file":"todo-store.service.js","sourcesContent":["import {ITodo} from './models/todo';\r\nimport { Injectable } from 'angular2/core';\r\nimport {Http, Response, Headers} from 'angular2/http';\r\nimport {Observable, Observer} from 'rxjs/RX';\r\nimport 'rxjs/add/operator/share';\r\nimport 'rxjs/add/operator/startWith';\r\n\r\n@Injectable()\r\nexport class TodoStoreService {\r\n    todos$: Observable<ITodo[]>;\r\n    private _todosObserver: Observer<ITodo[]>;\r\n    private _dataStore: {\r\n        todos: ITodo[];\r\n    };\r\n\r\n    constructor(private _http: Http) {\r\n        this._dataStore = { todos: [] };\r\n\r\n        this.todos$ = new Observable(observer => this._todosObserver = observer)\r\n            .startWith(this._dataStore.todos)\r\n            .share();\r\n    };\r\n\r\n    loadTodos() {\r\n        this._http.get('http://localhost:8080/api/todos')\r\n            .map((res: Response) => res.json())\r\n            .subscribe(data => {\r\n                this._dataStore.todos = data.todos;\r\n                this._todosObserver.next(this._dataStore.todos);\r\n            },\r\n            error => console.log(error)\r\n            );\r\n    };\r\n\r\n    removeToDos(id: number) {\r\n        this._http.delete(`http://localhost:8080/api/todos/${id}`)\r\n            .subscribe(response => {\r\n                this._dataStore.todos.forEach((t, index) => {\r\n                    if (t.id === id) { this._dataStore.todos.splice(index, 1); }\r\n                });\r\n                this._todosObserver.next(this._dataStore.todos);\r\n            }, error => console.log(error));\r\n    };\r\n\r\n    addTodo(message: string) {\r\n        var headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        this._http.post(`http://localhost:8080/api/todos/`, JSON.stringify({ 'message': message }), { headers: headers })\r\n            .map(response => response.json())\r\n            .subscribe(data => {\r\n                this._dataStore.todos.push(data);\r\n                this._todosObserver.next(this._dataStore.todos);\r\n            }, error => console.log(error));\r\n\r\n    };\r\n\r\n}\r\n"],"sourceRoot":"/source/"}